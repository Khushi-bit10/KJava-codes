import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {


    public static long arrayManipulation(int n, List<List<Integer>> queries) {
    final Map<Integer, Long> deltas = new TreeMap<>();
    queries.forEach(query -> {
        int a = query.get(0);
        int b = query.get(1);
        int k = query.get(2);

        final long deltaA = deltas.computeIfAbsent(a, key -> 0l);
        final long deltaB = deltas.computeIfAbsent(b+1, key -> 0l);

        deltas.put(a, deltaA + k);
        deltas.put(b+1, deltaB - k);
    });

    long max = 0;
    long current = 0;
    for(long delta: deltas.values()) {
        current += delta;
        max = max < current ? current : max;
    }
    return max;
}

    }


public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int m = Integer.parseInt(firstMultipleInput[1]);

        List<List<Integer>> queries = new ArrayList<>();

        IntStream.range(0, m).forEach(i -> {
            try {
                queries.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        long result = Result.arrayManipulation(n, queries);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
