import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {


    public static List<Integer> dynamicArray(int n, List<List<Integer>> queries) {
    List<List<Integer>> arr = new ArrayList<>();
    List<Integer> result= new ArrayList<>();
    for(int i=0;i<n;i++){
        arr.add(new ArrayList<>());
    }
    int idx=0;
    int lastAnswer=0;
    System.out.println(queries.size());
    for(int i=0;i<queries.size();i++){
            if(queries.get(i).get(0)==1){
                idx =(queries.get(i).get(1)^lastAnswer)%n;
                arr.get(idx).add(queries.get(i).get(2));
            }else{
                idx =(queries.get(i).get(1)^lastAnswer)%n;
                lastAnswer=arr.get(idx).get((queries.get(i).get(2))%arr.get(idx)                      .size());
                result.add(lastAnswer);
            }

    }
    return result;

}
}


public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n = Integer.parseInt(firstMultipleInput[0]);

        int q = Integer.parseInt(firstMultipleInput[1]);

        List<List<Integer>> queries = new ArrayList<>();

        IntStream.range(0, q).forEach(i -> {
            try {
                queries.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        List<Integer> result = Result.dynamicArray(n, queries);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
